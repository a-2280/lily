---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar';
import ImageCarousel from '../../components/ImageCarousel';
import '../../styles/global.css';
import { Image } from 'astro:assets';
import { loadQuery } from "../../sanity/lib/load-query";

interface Portrait {
  title: string;
  portraitsImages: Array<{
    url: string;
    imageTitle: string;
  }>;
}

interface Image {
  title: string;
  url: string;
  category: string;
  projectTitle: string;
}

const query = `
*[_type == "portraits"]{
  title,
  "portraitsImages": portraitsImages[]{
    "url": asset->url,
    "imageTitle": title
  }
}
`;

const { data: portraits } = await loadQuery<Portrait[]>({ query });

const portraitImages: Image[] = portraits.flatMap(portrait => 
  portrait.portraitsImages.map(image => ({
    title: image.imageTitle || portrait.title,
    url: image.url,
    category: 'portraits',
    projectTitle: portrait.title
  }))
);

// Function to determine if we should show the title
function shouldShowTitle(images: Image[], currentIndex: number): boolean {
  if (currentIndex === 0) return true;
  const currentTitle = images[currentIndex].title;
  const previousTitle = images[currentIndex - 1].title;
  return currentTitle !== previousTitle;
}
---

<Layout title="Lily Ballif - Portraits">
  <Navbar client:load />
  <div class="pb-[20px]">
    <div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px]">
      {portraitImages.map((image, index) => (
        <div class="flex-shrink-0">
          <Image 
            src={image.url} 
            alt={image.title}
            width={800}
            height={1200}
            class="h-[55svh] md:h-[60svh] w-auto pr-[10px] cursor-pointer hover-shrink"
            data-index={index}
            data-category={image.category}
            data-project-title={image.projectTitle}
            loading="eager"
            format="webp"
            quality={80}
          />
          {shouldShowTitle(portraitImages, index) && 
            <p class="pt-[10px] leading-none">{image.title}</p>
          }
        </div>
      ))}
    </div>
  </div>
  <ImageCarousel 
    client:load 
    images={portraitImages}
  />
</Layout>

<style>
  .no-scroll-bar {
    scrollbar-width: none;
    overflow-x: scroll;
  }
  .no-scroll-bar::-webkit-scrollbar {
    display: none;
  }
  .hover-shrink {
    transition: transform 0.3s ease;
  }
  /* Only apply hover effect when menu is closed */
  body:not(.menu-open) .hover-shrink:hover {
    transform: scale(0.975);
  }
</style>

<script is:inline>
  let isCarouselOpen = false;
  let currentIndex = 0;
  let currentCategory = '';
  let currentProjectTitle = '';

  // Listen for menu state changes
  window.addEventListener('menuStateChanged', (e) => {
    if (e.detail.isOpen) {
      document.body.classList.add('menu-open');
    } else {
      document.body.classList.remove('menu-open');
    }
  });

  function openCarousel(index, category, projectTitle) {
    isCarouselOpen = true;
    currentIndex = index;
    currentCategory = category;
    currentProjectTitle = projectTitle;
    updateCarousel();
    document.addEventListener('keydown', preventArrowScroll);
  }

  function closeCarousel() {
    isCarouselOpen = false;
    updateCarousel();
    document.removeEventListener('keydown', preventArrowScroll);
  }

  function preventArrowScroll(e) {
    if (isCarouselOpen && ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      e.preventDefault();
    }
  }

  function updateCarousel() {
    const event = new CustomEvent('updateCarousel', { 
      detail: { 
        isOpen: isCarouselOpen, 
        index: currentIndex,
        category: currentCategory,
        projectTitle: currentProjectTitle
      } 
    });
    window.dispatchEvent(event);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const imageGrid = document.getElementById('image-grid');
    if (imageGrid) {
      imageGrid.addEventListener('click', (e) => {
        if (e.target instanceof HTMLImageElement) {
          const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
          const category = e.target.getAttribute('data-category') || '';
          const projectTitle = e.target.getAttribute('data-project-title') || '';
          openCarousel(index, category, projectTitle);
        }
      });

      imageGrid.addEventListener('wheel', (e) => {
        if (e.deltaY !== 0) {
          e.preventDefault();
          imageGrid.scrollLeft += e.deltaY;
        }
      });
    }
  });

  window.addEventListener('closeCarousel', closeCarousel);
</script>