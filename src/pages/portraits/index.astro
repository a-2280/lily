---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar';
import ImageCarousel from '../../components/ImageCarousel';
import '../../styles/global.css';
import { Image } from 'astro:assets';
import { loadQuery } from "../../sanity/lib/load-query";

interface Portrait {
  title: string;
  portraitsImages: string[];
}

interface Image {
  title: string;
  url: string;
}

const query = `
*[_type == "portraits"]{
  title,
  "portraitsImages": portraitsImages[].asset->url
}
`;
const { data: portraits } = await loadQuery<Portrait[]>({ query });

const portraitImages: Image[] = portraits.flatMap(portrait => 
  portrait.portraitsImages.map(url => ({ title: portrait.title, url }))
);
---

<Layout title="Lily Ballif - Portraits">
	<Navbar client:load />
	<div class="pb-[20px]">
		<div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px]">
			{portraitImages.map((image, index) => (
				<div class="h-[55svh] md:h-[60svh] flex-shrink-0 pr-[10px]">
					<Image 
						src={image.url} 
						alt={image.title}
						width={800}
						height={1200}
						class="h-full w-auto cursor-pointer hover-shrink object-contain"
						data-index={index}
						loading="eager"
					/>
				</div>
			))}
		</div>
		<p class="pl-[20px] pt-[10px] leading-none">Portraits</p>
	</div>
	<ImageCarousel client:load images={portraitImages} />
</Layout>

<style>
    .no-scroll-bar {
        scrollbar-width: none;
        overflow-x: scroll;
    }
    .no-scroll-bar::-webkit-scrollbar {
        display: none;
    }
    .hover-shrink {
        transition: transform 0.3s ease;
    }
    /* Only apply hover effect when menu is closed */
    body:not(.menu-open) .hover-shrink:hover {
        transform: scale(0.975);
    }
</style>

<script is:inline>
    let isCarouselOpen = false;
    let currentIndex = 0;

    // Listen for menu state changes
    window.addEventListener('menuStateChanged', (e) => {
      if (e.detail.isOpen) {
        document.body.classList.add('menu-open');
      } else {
        document.body.classList.remove('menu-open');
      }
    });

    function preventArrowScroll(e) {
        if (isCarouselOpen && ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
            e.preventDefault();
        }
    }

    function openCarousel(index) {
        isCarouselOpen = true;
        currentIndex = index;
        updateCarousel();
        document.addEventListener('keydown', preventArrowScroll);
    }

    function closeCarousel() {
        isCarouselOpen = false;
        updateCarousel();
        document.removeEventListener('keydown', preventArrowScroll);
    }

    function updateCarousel() {
        const event = new CustomEvent('updateCarousel', { 
            detail: { isOpen: isCarouselOpen, index: currentIndex } 
        });
        window.dispatchEvent(event);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const imageGrid = document.getElementById('image-grid');
        if (imageGrid) {
            imageGrid.addEventListener('click', (e) => {
                if (e.target instanceof HTMLImageElement) {
                    const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
                    openCarousel(index);
                }
            });

            imageGrid.addEventListener('wheel', (e) => {
                if (e.deltaY !== 0) {
                    e.preventDefault();
                    imageGrid.scrollLeft += e.deltaY;
                }
            });
        }
    });

    window.addEventListener('closeCarousel', closeCarousel);
</script>