---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar';
import ImageCarousel from '../../components/ImageCarousel';
import '../../styles/global.css';
import { Image } from 'astro:assets';
import { loadQuery } from "../../sanity/lib/load-query";

interface Portrait {
  title: string;
  portraitsImages: string[];
}

interface Image {
  title: string;
  url: string;
}

const query = `
*[_type == "portraits"]{
  title,
  "portraitsImages": portraitsImages[].asset->url
}
`;
const { data: portraits } = await loadQuery<Portrait[]>({ query });

const portraitImages: Image[] = portraits.flatMap(portrait => 
  portrait.portraitsImages.map(url => ({ title: portrait.title, url }))
);
---

<Layout title="Lily Ballif - Portraits">
	<Navbar client:load />
	<div class="pb-[20px]">
		<div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px]">
			{portraitImages.map((image, index) => (
				<Image 
                    src={image.url} 
                    alt={image.title}
                    width={800}
                    height={1200}
                    class="h-[55svh] md:h-[60svh] w-auto pr-[0.5rem] cursor-pointer hover-shrink"
                    data-index={index}
                    loading={index < 3 ? "eager" : "lazy"}
                />
			))}
		</div>
		<p class="pl-[20px] pt-[0.5rem]">Portraits</p>
	</div>
	<ImageCarousel client:load images={portraitImages} />
</Layout>

<style>
    .no-scroll-bar {
        scrollbar-width: none;
        overflow-x: scroll; /* Allow horizontal scrolling */
    }
    .no-scroll-bar::-webkit-scrollbar {
        display: none;
    }
    .hover-shrink {
        transition: transform 0.3s ease;
    }
    .hover-shrink:hover {
        transform: scale(0.975);
    }
</style>

<script is:inline>
    let isCarouselOpen = false;
    let currentIndex = 0;

    function openCarousel(index) {
        isCarouselOpen = true;
        currentIndex = index;
        updateCarousel();
    }

    function closeCarousel() {
        isCarouselOpen = false;
        updateCarousel();
    }

    function updateCarousel() {
        const event = new CustomEvent('updateCarousel', { 
            detail: { isOpen: isCarouselOpen, index: currentIndex } 
        });
        window.dispatchEvent(event);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const imageGrid = document.getElementById('image-grid');
        if (imageGrid) {
            imageGrid.addEventListener('click', (e) => {
                if (e.target instanceof HTMLImageElement) {
                    const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
                    openCarousel(index);
                }
            });

            imageGrid.addEventListener('wheel', (e) => {
                if (e.deltaY !== 0) {
                    e.preventDefault();
                    imageGrid.scrollLeft += e.deltaY;
                }
            });
        }
    });

    window.addEventListener('closeCarousel', closeCarousel);
</script>