---
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import Navbar from '../../components/Navbar';
import ImageCarousel from '../../components/ImageCarousel';
import '../../styles/global.css';

import { loadQuery } from "../../sanity/lib/load-query";

interface Documentation {
  title: string;
  documentationImages: {
    title: string;
    asset: {
      url: string;
      metadata: {
        dimensions: {
          width: number;
          height: number;
        };
      };
    };
  }[];
}

interface ImageWithDimensions {
  title: string;
  url: string;
  width: number;
  height: number;
}

const { data } = await loadQuery<{ result: Documentation }>({
  query: `*[_type == "documentation"][0]{
    title,
    "documentationImages": documentationImages[]{
      title,
      "asset": asset->{
        "url": url,
        metadata {
          dimensions {
            width,
            height
          }
        }
      }
    }
  }`
});

const documentation = data;

const documentationImages: ImageWithDimensions[] = documentation.documentationImages.map((image) => ({
  title: image.title,
  url: image.asset.url,
  width: image.asset.metadata.dimensions.width,
  height: image.asset.metadata.dimensions.height
}));
---

<!-- Rest of the template remains the same -->

<Layout title={`Lily Ballif - ${documentation.title}`}>
  <Navbar client:load />
  <div class="pb-[10px]">
    <div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px]">
      {documentationImages.map((image, index) => (
        <div class="flex-shrink-0 relative">
          <Image 
            src={image.url}
            alt={image.title}
            width={image.width}
            height={image.height}
            class="h-[55svh] md:h-[60svh] w-auto cursor-pointer hover-shrink object-contain pr-[10px] pb-[36px]" 
            data-index={index}
            data-title={image.title}
            loading="eager"
          />
          <div class="preview-title absolute bottom-[11px] left-0 pr-[10px] opacity-0 transition-opacity duration-300 pointer-events-none" data-preview-for={index}>
            <p class="leading-none text-[#808080]">{image.title}</p>
          </div>
        </div>
      ))}
    </div>
  </div>
  <div id="sticky-title" class="fixed bottom-[20px] left-[20px] leading-none opacity-0 transition-opacity duration-300">
    <p></p>
  </div>
  <ImageCarousel client:load images={documentationImages} />
</Layout>

<style>
  .no-scroll-bar {
    scrollbar-width: none;
    overflow-x: scroll;
  }
  .no-scroll-bar::-webkit-scrollbar {
    display: none;
  }
  .hover-shrink {
    transition: transform 0.3s ease;
  }
  body:not(.menu-open) .hover-shrink:hover {
    transform: scale(0.975);
  }
  .preview-title {
    color: #000;
  }
</style>

<script is:inline>
  let isCarouselOpen = false;
  let currentIndex = 0;
  let lastLeftmostTitle = null;
  
  window.addEventListener('menuStateChanged', (e) => {
    if (e.detail.isOpen) {
      document.body.classList.add('menu-open');
    } else {
      document.body.classList.remove('menu-open');
    }
  });

  function preventArrowScroll(e) {
    if (isCarouselOpen && ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      e.preventDefault();
    }
  }

  function openCarousel(index) {
    isCarouselOpen = true;
    currentIndex = index;
    updateCarousel();
    document.addEventListener('keydown', preventArrowScroll);
  }

  function closeCarousel() {
    isCarouselOpen = false;
    updateCarousel();
    document.removeEventListener('keydown', preventArrowScroll);
  }

  function updateCarousel() {
    const event = new CustomEvent('updateCarousel', { 
      detail: { isOpen: isCarouselOpen, index: currentIndex } 
    });
    window.dispatchEvent(event);
  }

  function updateStickyTitle(title) {
    if (title === lastLeftmostTitle) return;
    lastLeftmostTitle = title;
    
    const titleElement = document.getElementById('sticky-title');
    if (titleElement) {
      const titleText = titleElement.querySelector('p');
      if (titleText) {
        titleText.textContent = title;
        titleElement.style.opacity = '1';
      }
    }
  }

  function updatePreviewTitles(leftmostTitle) {
  const imageGrid = document.getElementById('image-grid');
  if (!imageGrid) return;

  const gridRect = imageGrid.getBoundingClientRect();
  const images = Array.from(imageGrid.getElementsByTagName('img'));
  
  // Keep track of which titles we've already shown
  const shownTitles = new Set();
  
  images.forEach(img => {
    const rect = img.getBoundingClientRect();
    const title = img.getAttribute('data-title');
    const index = img.getAttribute('data-index');
    const previewElement = document.querySelector(`[data-preview-for="${index}"]`);
    
    if (previewElement && title && rect.right > gridRect.left && rect.left < gridRect.right) {
      // Calculate visibility ratio
      const visibleWidth = Math.min(rect.right, gridRect.right) - Math.max(rect.left, gridRect.left);
      const visibilityRatio = visibleWidth / rect.width;
      
      // Show preview title if:
      // 1. Image is at least 30% visible
      // 2. Its title is different from the current sticky title
      // 3. We haven't shown this title yet in the visible area
      if (visibilityRatio > 0.3 && title !== leftmostTitle && !shownTitles.has(title)) {
        previewElement.style.opacity = '1';
        shownTitles.add(title);
      } else {
        previewElement.style.opacity = '0';
      }
    }
  });
}

  function findLeftmostVisibleImage() {
    const imageGrid = document.getElementById('image-grid');
    if (!imageGrid) return;

    const gridRect = imageGrid.getBoundingClientRect();
    const images = Array.from(imageGrid.getElementsByTagName('img'));
    
    let leftmostImage = null;
    let minDistance = Infinity;

    images.forEach(img => {
      const rect = img.getBoundingClientRect();
      if (rect.right > gridRect.left && rect.left < gridRect.right) {
        const distance = rect.left - gridRect.left;
        if (distance < minDistance && distance >= -rect.width / 2) {
          minDistance = distance;
          leftmostImage = img;
        }
      }
    });

    if (leftmostImage) {
      const title = leftmostImage.getAttribute('data-title');
      if (title) {
        updateStickyTitle(title);
        updatePreviewTitles(title);
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const imageGrid = document.getElementById('image-grid');
    
    if (imageGrid) {
      findLeftmostVisibleImage();

      imageGrid.addEventListener('scroll', () => {
        requestAnimationFrame(findLeftmostVisibleImage);
      });

      imageGrid.addEventListener('click', (e) => {
        if (e.target instanceof HTMLImageElement) {
          const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
          openCarousel(index);
        }
      });

      imageGrid.addEventListener('wheel', (e) => {
        if (e.deltaY !== 0) {
          e.preventDefault();
          imageGrid.scrollLeft += e.deltaY;
        }
      });
    }
  });

  window.addEventListener('closeCarousel', closeCarousel);
</script>