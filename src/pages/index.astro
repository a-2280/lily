---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar';
import ImageCarousel from '../components/ImageCarousel';
import '../styles/global.css';
import { Image } from 'astro:assets';
import { loadQuery } from "../sanity/lib/load-query";

interface ImageWithTitle {
  url: string;
  imageTitle: string;
}

interface Project {
  title: string;
  favoriteImages: string[];
  allImages: string[];
}

interface DocumentationProject {
  title: string;
  favoriteImages: Array<{
    url: string;
    imageTitle: string;
  }>;
  allImages: Array<{
    url: string;
    imageTitle: string;
  }>;
}

interface FashionProject {
  title: string;
  favoriteImages: Array<{
    url: string;
    imageTitle: string;
  }>;
  allImages: Array<{
    url: string;
    imageTitle: string;
  }>;
}

interface PortraitProject {
  title: string;
  favoriteImages: Array<{
    url: string;
    imageTitle: string;
  }>;
  allImages: Array<{
    url: string;
    imageTitle: string;
  }>;
}

interface RandomProject {
  title: string;
  favoriteImages: Array<{
    url: string;
    imageTitle: string;
  }>;
  allImages: Array<{
    url: string;
    imageTitle: string;
  }>;
}

interface Image {
  title: string;
  url: string;
  category: string;
  projectTitle: string;
}

const query = `
{
  "projects": *[_type == "projects"]{
    title,
    "favoriteImages": projectImages[isFavorite == true].asset->url,
    "allImages": coalesce(projectImages[].asset->url, [])
  },
  "documentation": *[_type == "documentation"]{
    title,
    "favoriteImages": documentationImages[isFavorite == true]{
      "url": asset->url,
      "imageTitle": title
    },
    "allImages": coalesce(documentationImages[]{
      "url": asset->url,
      "imageTitle": title
    }, [])
  },
  "fashion": *[_type == "fashion"]{
    title,
    "favoriteImages": fashionImages[isFavorite == true]{
      "url": asset->url,
      "imageTitle": title
    },
    "allImages": coalesce(fashionImages[]{
      "url": asset->url,
      "imageTitle": title
    }, [])
  },
  "portraits": *[_type == "portraits"]{
    title,
    "favoriteImages": portraitsImages[isFavorite == true]{
      "url": asset->url,
      "imageTitle": title
    },
    "allImages": coalesce(portraitsImages[]{
      "url": asset->url,
      "imageTitle": title
    }, [])
  },
  "random": *[_type == "random"]{
    title,
    "favoriteImages": randomImages[isFavorite == true]{
      "url": asset->url,
      "imageTitle": title
    },
    "allImages": coalesce(randomImages[]{
      "url": asset->url,
      "imageTitle": title
    }, [])
  }
}
`;

const { data } = await loadQuery<{
  projects: Project[];
  documentation: DocumentationProject[];
  fashion: FashionProject[];
  portraits: PortraitProject[];
  random: RandomProject[];
}>({ query });

const categoryImages = new Map<string, Image[]>();

function processCategory(category: string, projects: Project[] | DocumentationProject[] | FashionProject[] | PortraitProject[] | RandomProject[]) {
  const images: Image[] = [];
  if (projects && Array.isArray(projects)) {
    projects.forEach(project => {
      if (['documentation', 'portraits', 'random', 'fashion'].includes(category)) {
        const projectWithTitles = project as DocumentationProject | FashionProject | PortraitProject | RandomProject;
        if (projectWithTitles.allImages && Array.isArray(projectWithTitles.allImages)) {
          projectWithTitles.allImages.forEach(image => {
            if (image.url) {
              images.push({
                title: image.imageTitle || project.title,
                url: image.url,
                category,
                projectTitle: project.title
              });
            }
          });
        }
      } else {
        const standardProject = project as Project;
        if (standardProject.allImages && Array.isArray(standardProject.allImages)) {
          standardProject.allImages.forEach(url => {
            if (url) {
              images.push({
                title: project.title,
                url,
                category,
                projectTitle: project.title
              });
            }
          });
        }
      }
    });
  }
  categoryImages.set(category, images);
}

// Process each category with null checks
processCategory('projects', data.projects || []);
processCategory('documentation', data.documentation || []);
processCategory('fashion', data.fashion || []);
processCategory('portraits', data.portraits || []);
processCategory('random', data.random || []);

// Create the favorites array for display with null checks
const unfilteredFavoriteImages: Image[] = [
  ...(data.projects || []).flatMap(doc => 
    (doc.favoriteImages || []).map(url => ({ 
      title: doc.title, 
      url, 
      category: 'projects',
      projectTitle: doc.title 
    }))
  ),
  ...(data.documentation || []).flatMap(doc => 
    (doc.favoriteImages || []).map(image => ({ 
      title: image.imageTitle || doc.title,
      url: image.url,
      category: 'documentation',
      projectTitle: doc.title 
    }))
  ),
  ...(data.fashion || []).flatMap(doc => 
    (doc.favoriteImages || []).map(image => ({ 
      title: image.imageTitle || doc.title,
      url: image.url,
      category: 'fashion',
      projectTitle: doc.title 
    }))
  ),
  ...(data.portraits || []).flatMap(doc => 
    (doc.favoriteImages || []).map(image => ({ 
      title: image.imageTitle || doc.title,
      url: image.url,
      category: 'portraits',
      projectTitle: doc.title 
    }))
  ),
  ...(data.random || []).flatMap(doc => 
    (doc.favoriteImages || []).map(image => ({ 
      title: image.imageTitle || doc.title,
      url: image.url,
      category: 'random',
      projectTitle: doc.title 
    }))
  )
].filter(image => image.url);

function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

const favoriteImages = shuffleArray(unfilteredFavoriteImages);
---

<Layout title="Lily Ballif">
  <Navbar client:load />
  <div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px] pb-[20px]">
    {favoriteImages.map((image, index) => (
      <div class="flex-shrink-0">
        <Image 
          src={image.url} 
          alt={image.title}
          width={800}
          height={1200}
          class="h-[55svh] md:h-[60svh] w-auto pr-[10px] cursor-pointer hover-shrink"
          data-index={index}
          data-category={image.category}
          data-project-title={image.projectTitle}
          loading="eager"
          format="webp"
          quality={80}
        />
        <p class="pt-[10px] leading-none">{image.title}</p>
      </div>
    ))}
  </div>
  <ImageCarousel 
    client:load 
    images={favoriteImages} 
    categoryImages={Object.fromEntries(categoryImages)}
  />
</Layout>

<style>
  .no-scroll-bar {
    scrollbar-width: none;
    overflow-x: scroll;
  }
  .no-scroll-bar::-webkit-scrollbar {
    display: none;
  }
  .hover-shrink {
    transition: transform 0.3s ease;
  }
  /* Only apply hover effect when menu is closed */
  body:not(.menu-open) .hover-shrink:hover {
    transform: scale(0.975);
  }
</style>

<script is:inline>
  let isCarouselOpen = false;
  let currentIndex = 0;
  let currentCategory = '';
  let currentProjectTitle = '';

  // Listen for menu state changes
  window.addEventListener('menuStateChanged', (e) => {
    if (e.detail.isOpen) {
      document.body.classList.add('menu-open');
    } else {
      document.body.classList.remove('menu-open');
    }
  });

  function openCarousel(index, category, projectTitle) {
    isCarouselOpen = true;
    currentIndex = index;
    currentCategory = category;
    currentProjectTitle = projectTitle;
    updateCarousel();
    document.addEventListener('keydown', preventArrowScroll);
  }

  function closeCarousel() {
    isCarouselOpen = false;
    updateCarousel();
    document.removeEventListener('keydown', preventArrowScroll);
  }

  function preventArrowScroll(e) {
    if (isCarouselOpen && ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
      e.preventDefault();
    }
  }

  function updateCarousel() {
    const event = new CustomEvent('updateCarousel', { 
      detail: { 
        isOpen: isCarouselOpen, 
        index: currentIndex,
        category: currentCategory,
        projectTitle: currentProjectTitle
      } 
    });
    window.dispatchEvent(event);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const imageGrid = document.getElementById('image-grid');
    if (imageGrid) {
      imageGrid.addEventListener('click', (e) => {
        if (e.target instanceof HTMLImageElement) {
          const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
          const category = e.target.getAttribute('data-category') || '';
          const projectTitle = e.target.getAttribute('data-project-title') || '';
          openCarousel(index, category, projectTitle);
        }
      });

      imageGrid.addEventListener('wheel', (e) => {
        if (e.deltaY !== 0) {
          e.preventDefault();
          imageGrid.scrollLeft += e.deltaY;
        }
      });
    }
  });

  window.addEventListener('closeCarousel', closeCarousel);
</script>