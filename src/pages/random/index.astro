---
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import Navbar from '../../components/Navbar';
import ImageCarousel from '../../components/ImageCarousel';
import '../../styles/global.css';

import { loadQuery } from "../../sanity/lib/load-query";

interface Random {
  title: string;
  randomImages: {
    url: string;
    metadata: {
      dimensions: {
        width: number;
        height: number;
      };
    };
  }[];
}

interface ImageWithDimensions {
  title: string;
  url: string;
  width: number;
  height: number;
}

const query = `
*[_type == "random"][0]{
  title,
  "randomImages": randomImages[].asset->{
    "url": url,
    metadata {
      dimensions {
        width,
        height
      }
    }
  }
}
`;
const { data: random } = await loadQuery<Random>({ query });

const randomImages: ImageWithDimensions[] = random?.randomImages?.map((image, index) => ({
  title: `${random.title} - Image ${index + 1}`,
  url: image.url,
  width: image.metadata.dimensions.width,
  height: image.metadata.dimensions.height
})) || [];
---

<Layout title={random?.title || 'Random'}>
  <Navbar client:load />
  <div class="pb-[20px]">
    {randomImages.length > 0 ? (
      <>
        <div id="image-grid" class="flex overflow-x-scroll no-scroll-bar pl-[20px]">
          {randomImages.map((image, index) => (
            <Image 
              src={image.url}
              alt={image.title}
              width={image.width}
              height={image.height}
              class="h-[55svh] md:h-[60svh] w-auto pr-[10px] cursor-pointer hover-shrink object-contain" 
              data-index={index}
              loading="eager"
            />
          ))}
        </div>
        <p class="pl-[20px] pt-[10px] leading-none">{random?.title}</p>
      </>
    ) : (
      <p class="pl-[20px]">No random images available yet.</p>
    )}
  </div>
  {randomImages.length > 0 && <ImageCarousel client:load images={randomImages} />}
</Layout>

<style>
  .no-scroll-bar {
    scrollbar-width: none;
    overflow-x: scroll;
  }
  .no-scroll-bar::-webkit-scrollbar {
    display: none;
  }
  .hover-shrink {
    transition: transform 0.3s ease;
  }
  /* Only apply hover effect when menu is closed */
  body:not(.menu-open) .hover-shrink:hover {
    transform: scale(0.975);
  }
</style>

<script is:inline>
    let isCarouselOpen = false;
    let currentIndex = 0;
  
    // Listen for menu state changes
    window.addEventListener('menuStateChanged', (e) => {
      if (e.detail.isOpen) {
        document.body.classList.add('menu-open');
      } else {
        document.body.classList.remove('menu-open');
      }
    });

    function preventArrowScroll(e) {
      if (isCarouselOpen && ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.key)) {
        e.preventDefault();
      }
    }
  
    function openCarousel(index) {
      isCarouselOpen = true;
      currentIndex = index;
      updateCarousel();
      document.addEventListener('keydown', preventArrowScroll);
    }
  
    function closeCarousel() {
      isCarouselOpen = false;
      updateCarousel();
      document.removeEventListener('keydown', preventArrowScroll);
    }
  
    function updateCarousel() {
      const event = new CustomEvent('updateCarousel', { 
        detail: { isOpen: isCarouselOpen, index: currentIndex } 
      });
      window.dispatchEvent(event);
    }
  
    document.addEventListener('DOMContentLoaded', () => {
      const imageGrid = document.getElementById('image-grid');
      if (imageGrid) {
        imageGrid.addEventListener('click', (e) => {
          if (e.target instanceof HTMLImageElement) {
            const index = parseInt(e.target.getAttribute('data-index') || '0', 10);
            openCarousel(index);
          }
        });
  
        imageGrid.addEventListener('wheel', (e) => {
          if (e.deltaY !== 0) {
            e.preventDefault();
            imageGrid.scrollLeft += e.deltaY;
          }
        });
      }
    });
  
    window.addEventListener('closeCarousel', closeCarousel);
</script>